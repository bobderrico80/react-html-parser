{"version":3,"sources":["../../src/index.ts","App.tsx","index.tsx"],"names":["attributeNameMap","accesskey","allowfullscreen","autocomplete","autofocus","autoplay","cellpadding","cellspacing","charset","classid","class","colspan","contextmenu","controlslist","crossorigin","datetime","enctype","formaction","formenctype","formmethod","formnovalidate","formtarget","frameborder","hreflang","for","inputmode","keyparams","keytype","marginheight","marginwidth","maxlength","media","mediagroup","minlength","novalidate","radiogroup","readonly","rowspan","spellcheck","srcdoc","srclang","srcset","tabindex","usemap","attributePropMapper","name","mapped","getStyleObject","element","style","Object","key","test","previousStyleObject","booleanAttributes","parseNodeList","node","text","previousNodes","parseElement","index","React","toReplace","replacer","type","props","children","i","attribute","parseHTML","html","dom","parser","parseError","Error","bodyHtml","elementsToParse","Card","title","border","borderBottom","App","dataset","card","childNodes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6ebe1367.chunk.js","sourcesContent":["import * as React from 'react'\n\nconst attributeNameMap = {\n  'accept-charset': 'acceptCharset',\n  accesskey: 'accessKey',\n  allowfullscreen: 'allowFullScreen',\n  autocomplete: 'autoComplete',\n  autofocus: 'autoFocus',\n  autoplay: 'autoPlay',\n  cellpadding: 'cellPadding',\n  cellspacing: 'cellSpacing',\n  charset: 'charSet',\n  classid: 'classID',\n  class: 'className',\n  colspan: 'colSpan',\n  'content-editable': 'contentEditable',\n  contextmenu: 'contextMenu',\n  controlslist: 'controlsList',\n  crossorigin: 'crossOrigin',\n  datetime: 'dateTime',\n  enctype: 'encType',\n  formaction: 'formAsdfadfction',\n  formenctype: 'formEncType',\n  formmethod: 'formMethod',\n  formnovalidate: 'formNoValidate',\n  formtarget: 'formTarget',\n  frameborder: 'frameBorder',\n  hreflang: 'hrefLang',\n  for: 'htmlFor',\n  'http-equiv': 'httpEquiv',\n  inputmode: 'inputMode',\n  keyparams: 'keyParams',\n  keytype: 'keyType',\n  marginheight: 'marginHeight',\n  marginwidth: 'marginWidth',\n  maxlength: 'maxLength',\n  media: 'media',\n  mediagroup: 'mediaGroup',\n  minlength: 'minLength',\n  novalidate: 'noValidate',\n  radiogroup: 'radioGroup',\n  readonly: 'readOnly',\n  rowspan: 'rowSpan',\n  spellcheck: 'spellCheck',\n  srcdoc: 'srcDoc',\n  srclang: 'srcLang',\n  srcset: 'srcSet',\n  tabindex: 'tabIndex',\n  usemap: 'useMap',\n  'accent-height': 'accentHeight',\n  'alignment-baseline': 'alignmentBaseline',\n  'arabic-form': 'arabicForm',\n  'baseline-shift': 'baselineShift',\n  'cap-height': 'capHeight',\n  'clip-path': 'clipPath',\n  'clip-rule': 'clipRule',\n  'color-interpolation': 'colorInterpolation',\n  'color-interpolation-filters': 'colorInterpolationFilters',\n  'color-profile': 'colorProfile',\n  'color-rendering': 'colorRendering',\n  'dominant-baseline': 'dominantBaseline',\n  'enable-background': 'enableBackground',\n  'fill-opacity': 'fillOpacity',\n  'fill-rule': 'fillRule',\n  'flood-color': 'floodColor',\n  'flood-opacity': 'floodOpacity',\n  'font-family': 'fontFamily',\n  'font-size': 'fontSize',\n  'font-size-adjust': 'fontSizeAdjust',\n  'font-stretch': 'fontStretch',\n  'font-style': 'fontStyle',\n  'font-variant': 'fontVariant',\n  'font-weight': 'fontWeight',\n  'glyph-name': 'glyphName',\n  'glyph-orientation-horizontal': 'glyphOrientationHorizontal',\n  'glyph-orientation-vertical': 'glyphOrientationVertical',\n  'glyph-ref': 'glyphRef',\n  'horiz-adv-x': 'horizAdvX',\n  'horiz-origin-x': 'horizOriginX',\n  'image-rendering': 'imageRendering',\n  'letter-spacing': 'letterSpacing',\n  'lighting-color': 'lightingColor',\n  'marker-end': 'markerEnd',\n  'marker-mid': 'markerMid',\n  'marker-start': 'markerStart',\n  'overline-position': 'overlinePosition',\n  'overline-thickness': 'overlineThickness',\n  'paint-order': 'paintOrder',\n  'panose-1': 'panose1',\n  'pointer-events': 'pointerEvents',\n  'rendering-intent': 'renderingIntent',\n  'shape-rendering': 'shapeRendering',\n  'stop-color': 'stopColor',\n  'stop-opacity': 'stopOpacity',\n  'strikethrough-position': 'strikethroughPosition',\n  'strikethrough-thickness': 'strikethroughThickness',\n  'stroke-dasharray': 'strokeDasharray',\n  'stroke-dashoffset': 'strokeDashoffset',\n  'stroke-linecap': 'strokeLinecap',\n  'stroke-linejoin': 'strokeLinejoin',\n  'stroke-miterlimit': 'strokeMiterlimit',\n  'stroke-opacity': 'strokeOpacity',\n  'stroke-width': 'strokeWidth',\n  'text-anchor': 'textAnchor',\n  'text-decoration': 'textDecoration',\n  'text-rendering': 'textRendering',\n  'transform-origin': 'transformOrigin',\n  'underline-position': 'underlinePosition',\n  'underline-thickness': 'underlineThickness',\n  'unicode-bidi': 'unicodeBidi',\n  'unicode-range': 'unicodeRange',\n  'units-per-em': 'unitsPerEm',\n  'v-alphabetic': 'vAlphabetic',\n  'v-hanging': 'vHanging',\n  'v-ideographic': 'vIdeographic',\n  'v-mathematical': 'vMathematical',\n  'vector-effect': 'vectorEffect',\n  'vert-adv-y': 'vertAdvY',\n  'vert-origin-x': 'vertOriginX',\n  'vert-origin-y': 'vertOriginY',\n  'word-spacing': 'wordSpacing',\n  'writing-mode': 'writingMode',\n  'x-height': 'xHeight',\n  'xlink:actuate': 'xlinkActuate',\n  'xlink:arcrole': 'xlinkArcrole',\n  'xlink:href': 'xlinkHref',\n  'xlink:role': 'xlinkRole',\n  'xlink:show': 'xlinkShow',\n  'xlink:title': 'xlinkTitle',\n  'xlink:type': 'xlinkType',\n  'xmlns:xlink': 'xmlnsXlink',\n  'xml:base': 'xmlBase',\n  'xml:lang': 'xmlLang',\n  'xml:space': 'xmlSpace'\n}\n\nconst attributePropMapper = (name: string) => {\n  const mapped = attributeNameMap[name]\n\n  if (mapped) {\n    return mapped\n  }\n\n  return name\n}\n\nconst getStyleObject = (element: HTMLElement) => {\n  const { style } = element\n\n  return Object.entries(style).reduce((previousStyleObject, [key, value]) => {\n    if (!value) {\n      return previousStyleObject\n    }\n\n    if (key === 'cssText') {\n      return previousStyleObject\n    }\n\n    if (/\\d+/.test(key)) {\n      return previousStyleObject\n    }\n\n    previousStyleObject[key] = value\n\n    return previousStyleObject\n  }, {})\n}\n\nconst booleanAttributes = [\n  'allowfullscreen',\n  'allowpaymentrequest',\n  'async',\n  'autofocus',\n  'autoplay',\n  'checked',\n  'controls',\n  'default',\n  'disabled',\n  'formnovalidate',\n  'hidden',\n  'ismap',\n  'itemscope',\n  'loop',\n  'multiple',\n  'muted',\n  'nomodule',\n  'novalidate',\n  'open',\n  'playsinline',\n  'readonly',\n  'required',\n  'reversed',\n  'selected',\n  'truespeed'\n]\n\nconst parseNodeList = (\n  nodeList: NodeList,\n  replace?: Replacer\n): React.ReactNode => {\n  return [...nodeList].reduce(\n    (\n      previousNodes: React.ReactNode[],\n      node: Node,\n      index\n    ): React.ReactNode[] => {\n      if (node.nodeType === 3) {\n        let text = node.textContent\n\n        if (!text) {\n          return previousNodes\n        }\n\n        text = text.replace(/\\s+/g, ' ')\n\n        // Don't add empty text nodes\n        if (text.trim().length > 0) {\n          previousNodes.push(text)\n        }\n      }\n\n      if (node.nodeType === 1) {\n        previousNodes.push(parseElement(node as HTMLElement, replace, index))\n      }\n\n      return previousNodes\n    },\n    [] as React.ReactNode[]\n  )\n}\n\nexport const parseElement = (\n  element: HTMLElement | NodeList,\n  replacer?: Replacer,\n  index = 0\n): React.ReactNode => {\n  // Handle if the node is actually a node list\n  if (element instanceof NodeList) {\n    return React.createElement(\n      React.Fragment,\n      {},\n      parseNodeList(element, replacer)\n    )\n  }\n\n  // Handle the replace() function\n  let toReplace = null\n\n  if (replacer) {\n    toReplace = replacer(element)\n\n    if (!React.isValidElement(toReplace)) {\n      toReplace = null\n    }\n  }\n\n  if (toReplace) {\n    return React.cloneElement(toReplace, { key: index })\n  }\n\n  const type = element.nodeName.toLowerCase()\n  const props: { [key: string]: any } = {}\n  let children = null\n\n  props.key = index\n\n  if (element.hasAttributes()) {\n    for (let i = 0; i < element.attributes.length; i++) {\n      const attribute = element.attributes[i]\n\n      if (attribute.name === 'style') {\n        props.style = getStyleObject(element)\n        continue\n      }\n\n      if (booleanAttributes.includes(attribute.name)) {\n        props[attributePropMapper(attribute.name)] = true\n        continue\n      }\n\n      props[attributePropMapper(attribute.name)] = attribute.value\n    }\n  }\n\n  if (element.hasChildNodes()) {\n    children = parseNodeList(element.childNodes, replacer)\n  }\n\n  return React.createElement(type, props, children)\n}\n\nexport type Replacer = (element: HTMLElement) => React.ReactNode\n\nexport const parseHTML = (html: string, replacer?: Replacer) => {\n  const parser = new DOMParser()\n  const dom = parser.parseFromString(html, 'text/html')\n  const parseError = dom.querySelector('parsererror')\n\n  if (parseError) {\n    throw new Error(`Error parsing HTML: ${parseError.textContent}`)\n  }\n\n  const bodyHtml = dom.querySelector('body')\n\n  if (!bodyHtml) {\n    throw new Error('Unexpected body error. HTML `body` is null')\n  }\n\n  let elementsToParse: NodeList | HTMLElement = bodyHtml.childNodes\n\n  if (elementsToParse.length === 1) {\n    elementsToParse = elementsToParse[0] as HTMLElement\n  }\n\n  return parseElement(elementsToParse, replacer)\n}\n","import React from 'react'\n\nimport { parseHTML, parseElement } from '@bobderrico80/react-html-parser'\nimport '@bobderrico80/react-html-parser/dist/index.css'\n\nconst html = `\n  <head>\n    <h1>Does this work?</h1>\n  </head>\n  <article>\n    <style>.foobar { color: blue }</style>\n    <section class=\"foobar\">\n      <h2 data-colors=\"true\">Hello, world!</h2>\n      <p>\n        This is my attempt at writing a React HTML parser. It is similar to things like\n        <a href=\"https://www.npmjs.com/package/html-react-parser\" target=\"_blank\">\n          <code>html-react-parser</code>\n        </a>\n        but hopefully works a little bit better.\n      </p>\n    </section>\n    <section data-card=\"This is a card\">\n      <h2>Why?!</h2>\n      <p>\n        Well, because I wanted to learn more about the DOM APIs, but mostly I was frustrated with\n        <code>html-react-parser</code>. It's <code>replace</code> function does not deal with real\n        DOM nodes, and is therefore kind of a pain to work with.\n      </p>\n      <p data-card=\"Nested Card\">\n        I'd like to build something with a similar API but is hopefully a little more intuitive\n        to use. I realize I'm going to have to test the hell out of it!\n      </p>\n    </section>\n    <section style=\"color: red; font-weight: bold; font-size: 16px\" tabindex=\"-1\">\n      <h2>Here's a form</h2>\n      <form>\n        <label for=\"foo\">\n          Foo\n          <input type=\"checkbox\" id=\"foo\" readonly />\n          <button type=\"button\" disabled>Click Me</button>\n        </label>\n      </form>\n    </section>\n  </article>\n`\n\ninterface CardProps {\n  title: string\n  children: React.ReactNode\n}\n\nconst Card = ({ title, children }: CardProps) => {\n  return (\n    <div style={{ border: '2px solid black' }}>\n      <div style={{ borderBottom: '1px solid black' }}>{title}</div>\n      {children}\n    </div>\n  )\n}\n\nconst App = () => {\n  const replacer = (element: HTMLElement) => {\n    if (element.dataset.card) {\n      return (\n        <Card title={element.dataset.card}>\n          {parseElement(element.childNodes, replacer)}\n        </Card>\n      )\n    }\n\n    return null\n  }\n\n  return (\n    <div>\n      {parseHTML(html, replacer)}\n      <h1>Disabled Button</h1>\n      {parseHTML('<button disabled>Foo</button>')}\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}