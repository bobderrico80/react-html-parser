(this["webpackJsonp@bobderrico80/react-html-parser-example"]=this["webpackJsonp@bobderrico80/react-html-parser-example"]||[]).push([[0],{14:function(e,t,n){},15:function(e,t,n){"use strict";n.r(t);n(7);var r=n(0),o=n.n(r),i=n(3),a=n.n(i),l=n(4),s=n(5),c={"accept-charset":"acceptCharset",accesskey:"accessKey",allowfullscreen:"allowFullScreen",autocomplete:"autoComplete",autofocus:"autoFocus",autoplay:"autoPlay",cellpadding:"cellPadding",cellspacing:"cellSpacing",charset:"charSet",classid:"classID",class:"className",colspan:"colSpan","content-editable":"contentEditable",contextmenu:"contextMenu",controlslist:"controlsList",crossorigin:"crossOrigin",datetime:"dateTime",enctype:"encType",formaction:"formAsdfadfction",formenctype:"formEncType",formmethod:"formMethod",formnovalidate:"formNoValidate",formtarget:"formTarget",frameborder:"frameBorder",hreflang:"hrefLang",for:"htmlFor","http-equiv":"httpEquiv",inputmode:"inputMode",keyparams:"keyParams",keytype:"keyType",marginheight:"marginHeight",marginwidth:"marginWidth",maxlength:"maxLength",media:"media",mediagroup:"mediaGroup",minlength:"minLength",novalidate:"noValidate",radiogroup:"radioGroup",readonly:"readOnly",rowspan:"rowSpan",spellcheck:"spellCheck",srcdoc:"srcDoc",srclang:"srcLang",srcset:"srcSet",tabindex:"tabIndex",usemap:"useMap","accent-height":"accentHeight","alignment-baseline":"alignmentBaseline","arabic-form":"arabicForm","baseline-shift":"baselineShift","cap-height":"capHeight","clip-path":"clipPath","clip-rule":"clipRule","color-interpolation":"colorInterpolation","color-interpolation-filters":"colorInterpolationFilters","color-profile":"colorProfile","color-rendering":"colorRendering","dominant-baseline":"dominantBaseline","enable-background":"enableBackground","fill-opacity":"fillOpacity","fill-rule":"fillRule","flood-color":"floodColor","flood-opacity":"floodOpacity","font-family":"fontFamily","font-size":"fontSize","font-size-adjust":"fontSizeAdjust","font-stretch":"fontStretch","font-style":"fontStyle","font-variant":"fontVariant","font-weight":"fontWeight","glyph-name":"glyphName","glyph-orientation-horizontal":"glyphOrientationHorizontal","glyph-orientation-vertical":"glyphOrientationVertical","glyph-ref":"glyphRef","horiz-adv-x":"horizAdvX","horiz-origin-x":"horizOriginX","image-rendering":"imageRendering","letter-spacing":"letterSpacing","lighting-color":"lightingColor","marker-end":"markerEnd","marker-mid":"markerMid","marker-start":"markerStart","overline-position":"overlinePosition","overline-thickness":"overlineThickness","paint-order":"paintOrder","panose-1":"panose1","pointer-events":"pointerEvents","rendering-intent":"renderingIntent","shape-rendering":"shapeRendering","stop-color":"stopColor","stop-opacity":"stopOpacity","strikethrough-position":"strikethroughPosition","strikethrough-thickness":"strikethroughThickness","stroke-dasharray":"strokeDasharray","stroke-dashoffset":"strokeDashoffset","stroke-linecap":"strokeLinecap","stroke-linejoin":"strokeLinejoin","stroke-miterlimit":"strokeMiterlimit","stroke-opacity":"strokeOpacity","stroke-width":"strokeWidth","text-anchor":"textAnchor","text-decoration":"textDecoration","text-rendering":"textRendering","transform-origin":"transformOrigin","underline-position":"underlinePosition","underline-thickness":"underlineThickness","unicode-bidi":"unicodeBidi","unicode-range":"unicodeRange","units-per-em":"unitsPerEm","v-alphabetic":"vAlphabetic","v-hanging":"vHanging","v-ideographic":"vIdeographic","v-mathematical":"vMathematical","vector-effect":"vectorEffect","vert-adv-y":"vertAdvY","vert-origin-x":"vertOriginX","vert-origin-y":"vertOriginY","word-spacing":"wordSpacing","writing-mode":"writingMode","x-height":"xHeight","xlink:actuate":"xlinkActuate","xlink:arcrole":"xlinkArcrole","xlink:href":"xlinkHref","xlink:role":"xlinkRole","xlink:show":"xlinkShow","xlink:title":"xlinkTitle","xlink:type":"xlinkType","xmlns:xlink":"xmlnsXlink","xml:base":"xmlBase","xml:lang":"xmlLang","xml:space":"xmlSpace"},d=function(e){var t=c[e];return t||e},h=function(e){var t=e.style;return Object.entries(t).reduce((function(e,t){var n=Object(s.a)(t,2),r=n[0],o=n[1];return o?("cssText"===r||/\d+/.test(r)||(e[r]=o),e):e}),{})},p=["allowfullscreen","allowpaymentrequest","async","autofocus","autoplay","checked","controls","default","disabled","formnovalidate","hidden","ismap","itemscope","loop","multiple","muted","nomodule","novalidate","open","playsinline","readonly","required","reversed","selected","truespeed"],u=function(e,t){return Object(l.a)(e).reduce((function(e,n,r){if(3===n.nodeType){var o=n.textContent;if(!o)return e;(o=o.replace(/\s+/g," ")).trim().length>0&&e.push(o)}return 1===n.nodeType&&e.push(m(n,t,r)),e}),[])},m=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;if(e instanceof NodeList)return Object(r.createElement)(r.Fragment,{},u(e,t));var o=null;if(t&&(o=t(e),Object(r.isValidElement)(o)||(o=null)),o)return Object(r.cloneElement)(o,{key:n});var i=e.nodeName.toLowerCase(),a={},l=null;if(a.key=n,e.hasAttributes())for(var s=0;s<e.attributes.length;s++){var c=e.attributes[s];"style"!==c.name?p.includes(c.name)?a[d(c.name)]=!0:a[d(c.name)]=c.value:a.style=h(e)}return e.hasChildNodes()&&(l=u(e.childNodes,t)),Object(r.createElement)(i,a,l)},f=function(e,t){var n=(new DOMParser).parseFromString(e,"text/html"),r=n.querySelector("parsererror");if(r)throw new Error("Error parsing HTML: ".concat(r.textContent));var o=n.querySelector("body");if(!o)throw new Error("Unexpected body error. HTML `body` is null");var i=o.childNodes;return 1===i.length&&(i=i[0]),m(i,t)},g=(n(14),function(e){var t=e.title,n=e.children;return o.a.createElement("div",{style:{border:"2px solid black"}},o.a.createElement("div",{style:{borderBottom:"1px solid black"}},t),n)}),y=function(){return o.a.createElement("div",null,f('\n  <head>\n    <h1>Does this work?</h1>\n  </head>\n  <article>\n    <style>.foobar { color: blue }</style>\n    <section class="foobar">\n      <h2 data-colors="true">Hello, world!</h2>\n      <p>\n        This is my attempt at writing a React HTML parser. It is similar to things like\n        <a href="https://www.npmjs.com/package/html-react-parser" target="_blank">\n          <code>html-react-parser</code>\n        </a>\n        but hopefully works a little bit better.\n      </p>\n    </section>\n    <section data-card="This is a card">\n      <h2>Why?!</h2>\n      <p>\n        Well, because I wanted to learn more about the DOM APIs, but mostly I was frustrated with\n        <code>html-react-parser</code>. It\'s <code>replace</code> function does not deal with real\n        DOM nodes, and is therefore kind of a pain to work with.\n      </p>\n      <p data-card="Nested Card">\n        I\'d like to build something with a similar API but is hopefully a little more intuitive\n        to use. I realize I\'m going to have to test the hell out of it!\n      </p>\n    </section>\n    <section style="color: red; font-weight: bold; font-size: 16px" tabindex="-1">\n      <h2>Here\'s a form</h2>\n      <form>\n        <label for="foo">\n          Foo\n          <input type="checkbox" id="foo" readonly />\n          <button type="button" disabled>Click Me</button>\n        </label>\n      </form>\n    </section>\n  </article>\n',(function e(t){return t.dataset.card?o.a.createElement(g,{title:t.dataset.card},m(t.childNodes,e)):null})),o.a.createElement("h1",null,"Disabled Button"),f("<button disabled>Foo</button>"))};a.a.render(o.a.createElement(y,null),document.getElementById("root"))},6:function(e,t,n){e.exports=n(15)},7:function(e,t,n){}},[[6,1,2]]]);
//# sourceMappingURL=main.6ebe1367.chunk.js.map